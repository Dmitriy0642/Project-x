{"ast":null,"code":"import axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport localStorageService, { getRefrestTokent, setTokens } from \"./localStorage.service\";\nconst key = \"AIzaSyCFKm-NzKP4yGvPnz2hgVWOjk0zxb4d_to\";\nconst authService = {\n  signUp: async _ref => {\n    let {\n      email,\n      password\n    } = _ref;\n    const url = `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${key}`;\n    try {\n      const data = axios.post(url, {\n        email,\n        password,\n        returnSecureToken: true\n      });\n      setTokens(data);\n      return data;\n    } catch (error) {\n      console.log(error.response.data.error.message);\n      if (error.response.data.error.message === \"INVALID_PASSWORD\") {\n        return toast.error(\"Вы вели неверный пароль\");\n      }\n      if (error.response.data.error.message === \"TOO_MANY_ATTEMPTS_TRY_LATER\") {\n        return toast.error(\"Вы сделали много попыток ,попробуйте позже\");\n      }\n      if (error.response.data.error.message === \"EMAIL_NOT_FOUND\") {\n        return toast.error(\"Такого email нет\");\n      }\n    }\n  },\n  logIn: async _ref2 => {\n    let {\n      email,\n      password\n    } = _ref2;\n    const url = `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${key}`;\n    try {\n      const data = axios.post(url, {\n        email,\n        password,\n        returnSecureToken: true\n      });\n      setTokens(data);\n      return data;\n    } catch (e) {\n      if (e.response.data.error.message === \"INVALID_PASSWORD\") {\n        return toast.error(\"Вы вели неверный пароль\");\n      }\n      if (e.response.data.error.message === \"EMAIL_NOT_FOUND\") {\n        return toast.error(\"Такого email нет\");\n      }\n      if (e.response.data.error.message === \"TOO_MANY_ATTEMPTS_TRY_LATER\") {\n        return toast.error(\"Вы сделали много попыток ,попробуйте позже\");\n      }\n    }\n  },\n  refreshToken: async () => {\n    const url = `https://securetoken.googleapis.com/v1/token?key=${key}`;\n    const refreshToken = getRefrestTokent();\n    const {\n      data\n    } = await axios.post(url, {\n      grant_type: \"refresh_token\",\n      refresh_token: refreshToken\n    });\n    localStorageService.setTokens({\n      refreshToken: data.refresh_token,\n      idToken: data.id_token,\n      localId: data.user_id,\n      expiresIn: data.expires_in\n    });\n    return data;\n  }\n};\nexport default authService;","map":{"version":3,"names":["axios","toast","localStorageService","getRefrestTokent","setTokens","key","authService","signUp","email","password","url","data","post","returnSecureToken","error","console","log","response","message","logIn","e","refreshToken","grant_type","refresh_token","idToken","id_token","localId","user_id","expiresIn","expires_in"],"sources":["C:/Users/Slim Shady/Desktop/project-x/client/src/services/auth.service.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport localStorageService, {\r\n  getRefrestTokent,\r\n  setTokens,\r\n} from \"./localStorage.service\";\r\nconst key = \"AIzaSyCFKm-NzKP4yGvPnz2hgVWOjk0zxb4d_to\";\r\n\r\nconst authService = {\r\n  signUp: async ({ email, password }) => {\r\n    const url = `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${key}`;\r\n    try {\r\n      const data = axios.post(url, {\r\n        email,\r\n        password,\r\n        returnSecureToken: true,\r\n      });\r\n      setTokens(data);\r\n      return data;\r\n    } catch (error) {\r\n      console.log(error.response.data.error.message);\r\n      if (error.response.data.error.message === \"INVALID_PASSWORD\") {\r\n        return toast.error(\"Вы вели неверный пароль\");\r\n      }\r\n      if (error.response.data.error.message === \"TOO_MANY_ATTEMPTS_TRY_LATER\") {\r\n        return toast.error(\"Вы сделали много попыток ,попробуйте позже\");\r\n      }\r\n      if (error.response.data.error.message === \"EMAIL_NOT_FOUND\") {\r\n        return toast.error(\"Такого email нет\");\r\n      }\r\n    }\r\n  },\r\n  logIn: async ({ email, password }) => {\r\n    const url = `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${key}`;\r\n    try {\r\n      const data = axios.post(url, {\r\n        email,\r\n        password,\r\n        returnSecureToken: true,\r\n      });\r\n      setTokens(data);\r\n      return data;\r\n    } catch (e) {\r\n      if (e.response.data.error.message === \"INVALID_PASSWORD\") {\r\n        return toast.error(\"Вы вели неверный пароль\");\r\n      }\r\n      if (e.response.data.error.message === \"EMAIL_NOT_FOUND\") {\r\n        return toast.error(\"Такого email нет\");\r\n      }\r\n      if (e.response.data.error.message === \"TOO_MANY_ATTEMPTS_TRY_LATER\") {\r\n        return toast.error(\"Вы сделали много попыток ,попробуйте позже\");\r\n      }\r\n    }\r\n  },\r\n\r\n  refreshToken: async () => {\r\n    const url = `https://securetoken.googleapis.com/v1/token?key=${key}`;\r\n    const refreshToken = getRefrestTokent();\r\n    const { data } = await axios.post(url, {\r\n      grant_type: \"refresh_token\",\r\n      refresh_token: refreshToken,\r\n    });\r\n    localStorageService.setTokens({\r\n      refreshToken: data.refresh_token,\r\n      idToken: data.id_token,\r\n      localId: data.user_id,\r\n      expiresIn: data.expires_in,\r\n    });\r\n    return data;\r\n  },\r\n};\r\n\r\nexport default authService;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}