{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport httpService from \"../services/http.service\";\nimport { getAccesToken } from \"../services/localStorage.service\";\nconst productSlice = createSlice({\n  name: \"product\",\n  initialState: {\n    entities: null,\n    error: null,\n    isLoading: true\n  },\n  reducers: {\n    productRequested: state => {\n      state.isLoading = true;\n    },\n    productReceved: (state, aciton) => {\n      state.entities = aciton.payload;\n      state.isLoading = false;\n    },\n    productRequestFailed: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    },\n    addedNewProduct: (state, action) => {\n      state.entities.push(action.payload);\n    },\n    removeProduct: (state, aciton) => {\n      const index = state.entities.findIndex(el => el._id === aciton.payload.product);\n      if (index !== -1) {\n        state.entities.splice(index, 1);\n      }\n    }\n  }\n});\nconst {\n  reducer: productReducer,\n  actions\n} = productSlice;\nconst {\n  productRequested,\n  productReceved,\n  productRequestFailed,\n  addedNewProduct,\n  removeProduct\n} = actions;\nexport const loadProductList = () => async dispatch => {\n  dispatch(productRequested());\n  try {\n    const initiArr = [];\n    const {\n      data\n    } = await httpService.get(\"product\" + `.json?auth=${getAccesToken()}`);\n    Object.keys(data).forEach(item => initiArr.push(data[item]));\n    dispatch(productReceved(initiArr));\n  } catch (error) {\n    dispatch(productRequestFailed(error.message));\n  }\n};\nexport const loadNewProduct = product => dispatch => {\n  dispatch(productRequested());\n  try {\n    dispatch(addedNewProduct(product));\n  } catch (error) {\n    dispatch(productRequestFailed(error.message));\n  }\n};\nexport const removingProduct = product => dispatch => {\n  dispatch(productRequested());\n  try {\n    dispatch(removeProduct(product));\n  } catch (error) {\n    dispatch(productRequestFailed(error.message));\n  }\n};\nexport const getProduct = () => state => state.product.entities;\nexport default productReducer;","map":{"version":3,"names":["createSlice","httpService","getAccesToken","productSlice","name","initialState","entities","error","isLoading","reducers","productRequested","state","productReceved","aciton","payload","productRequestFailed","action","addedNewProduct","push","removeProduct","index","findIndex","el","_id","product","splice","reducer","productReducer","actions","loadProductList","dispatch","initiArr","data","get","Object","keys","forEach","item","message","loadNewProduct","removingProduct","getProduct"],"sources":["C:/Users/Slim Shady/Desktop/project-x/client/src/store/product.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport httpService from \"../services/http.service\";\r\nimport { getAccesToken } from \"../services/localStorage.service\";\r\nconst productSlice = createSlice({\r\n  name: \"product\",\r\n  initialState: {\r\n    entities: null,\r\n    error: null,\r\n    isLoading: true,\r\n  },\r\n  reducers: {\r\n    productRequested: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    productReceved: (state, aciton) => {\r\n      state.entities = aciton.payload;\r\n      state.isLoading = false;\r\n    },\r\n    productRequestFailed: (state, action) => {\r\n      state.error = action.payload;\r\n      state.isLoading = false;\r\n    },\r\n    addedNewProduct: (state, action) => {\r\n      state.entities.push(action.payload);\r\n    },\r\n    removeProduct: (state, aciton) => {\r\n      const index = state.entities.findIndex(\r\n        (el) => el._id === aciton.payload.product\r\n      );\r\n      if (index !== -1) {\r\n        state.entities.splice(index, 1);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nconst { reducer: productReducer, actions } = productSlice;\r\nconst {\r\n  productRequested,\r\n  productReceved,\r\n  productRequestFailed,\r\n  addedNewProduct,\r\n  removeProduct,\r\n} = actions;\r\n\r\nexport const loadProductList = () => async (dispatch) => {\r\n  dispatch(productRequested());\r\n  try {\r\n    const initiArr = [];\r\n    const { data } = await httpService.get(\r\n      \"product\" + `.json?auth=${getAccesToken()}`\r\n    );\r\n    Object.keys(data).forEach((item) => initiArr.push(data[item]));\r\n    dispatch(productReceved(initiArr));\r\n  } catch (error) {\r\n    dispatch(productRequestFailed(error.message));\r\n  }\r\n};\r\n\r\nexport const loadNewProduct = (product) => (dispatch) => {\r\n  dispatch(productRequested());\r\n  try {\r\n    dispatch(addedNewProduct(product));\r\n  } catch (error) {\r\n    dispatch(productRequestFailed(error.message));\r\n  }\r\n};\r\n\r\nexport const removingProduct = (product) => (dispatch) => {\r\n  dispatch(productRequested());\r\n  try {\r\n    dispatch(removeProduct(product));\r\n  } catch (error) {\r\n    dispatch(productRequestFailed(error.message));\r\n  }\r\n};\r\n\r\nexport const getProduct = () => (state) => state.product.entities;\r\n\r\nexport default productReducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}