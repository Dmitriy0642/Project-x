{"ast":null,"code":"export function validator(data, config) {\n  const pass = data.password;\n  const submitetPass = data.passwordagain;\n  const errors = {};\n  function validate(valifateMethod, data, config) {\n    let statusValidate;\n    switch (valifateMethod) {\n      case \"isRequired\":\n        statusValidate = data.trim() === \"\";\n        break;\n      case \"isEmail\":\n        {\n          const emailRegExp = /^\\S+@\\S+\\.\\S+$/g;\n          statusValidate = !emailRegExp.test(data);\n          break;\n        }\n      case \"isCapitalSymbol\":\n        {\n          const passwordRegExp = /[A-Z]+/g;\n          statusValidate = !passwordRegExp.test(data);\n          break;\n        }\n      case \"isCapitalLength\":\n        {\n          statusValidate = data.length < 8;\n          break;\n        }\n      case \"isNumTel\":\n        {\n          const numTelRegExpAgain = /^\\d+$/g;\n          statusValidate = !numTelRegExpAgain.test(data);\n          break;\n        }\n      case \"isCapitalValidationPass\":\n        {\n          statusValidate = `${pass}` !== `${submitetPass}`;\n          break;\n        }\n      default:\n        break;\n    }\n    if (statusValidate) return config.message;\n  }\n  for (const fieldName in data) {\n    for (const valifateMethod in config[fieldName]) {\n      const error = validate(valifateMethod, data[fieldName], config[fieldName][valifateMethod]);\n      if (error && !errors[fieldName]) {\n        errors[fieldName] = error;\n      }\n    }\n  }\n  return errors;\n}","map":{"version":3,"names":["validator","data","config","pass","password","submitetPass","passwordagain","errors","validate","valifateMethod","statusValidate","trim","emailRegExp","test","passwordRegExp","length","numTelRegExpAgain","message","fieldName","error"],"sources":["C:/Users/Slim Shady/Desktop/project-x/client/src/utils/validator.js"],"sourcesContent":["export function validator(data, config) {\r\n  const pass = data.password;\r\n  const submitetPass = data.passwordagain;\r\n  const errors = {};\r\n  function validate(valifateMethod, data, config) {\r\n    let statusValidate;\r\n    switch (valifateMethod) {\r\n      case \"isRequired\":\r\n        statusValidate = data.trim() === \"\";\r\n        break;\r\n      case \"isEmail\": {\r\n        const emailRegExp = /^\\S+@\\S+\\.\\S+$/g;\r\n        statusValidate = !emailRegExp.test(data);\r\n        break;\r\n      }\r\n      case \"isCapitalSymbol\": {\r\n        const passwordRegExp = /[A-Z]+/g;\r\n        statusValidate = !passwordRegExp.test(data);\r\n        break;\r\n      }\r\n      case \"isCapitalLength\": {\r\n        statusValidate = data.length < 8;\r\n        break;\r\n      }\r\n      case \"isNumTel\": {\r\n        const numTelRegExpAgain = /^\\d+$/g;\r\n        statusValidate = !numTelRegExpAgain.test(data);\r\n        break;\r\n      }\r\n      case \"isCapitalValidationPass\": {\r\n        statusValidate = `${pass}` !== `${submitetPass}`;\r\n        break;\r\n      }\r\n      default:\r\n        break;\r\n    }\r\n    if (statusValidate) return config.message;\r\n  }\r\n  for (const fieldName in data) {\r\n    for (const valifateMethod in config[fieldName]) {\r\n      const error = validate(\r\n        valifateMethod,\r\n        data[fieldName],\r\n        config[fieldName][valifateMethod]\r\n      );\r\n      if (error && !errors[fieldName]) {\r\n        errors[fieldName] = error;\r\n      }\r\n    }\r\n  }\r\n  return errors;\r\n}\r\n"],"mappings":"AAAA,OAAO,SAASA,SAAS,CAACC,IAAI,EAAEC,MAAM,EAAE;EACtC,MAAMC,IAAI,GAAGF,IAAI,CAACG,QAAQ;EAC1B,MAAMC,YAAY,GAAGJ,IAAI,CAACK,aAAa;EACvC,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjB,SAASC,QAAQ,CAACC,cAAc,EAAER,IAAI,EAAEC,MAAM,EAAE;IAC9C,IAAIQ,cAAc;IAClB,QAAQD,cAAc;MACpB,KAAK,YAAY;QACfC,cAAc,GAAGT,IAAI,CAACU,IAAI,EAAE,KAAK,EAAE;QACnC;MACF,KAAK,SAAS;QAAE;UACd,MAAMC,WAAW,GAAG,iBAAiB;UACrCF,cAAc,GAAG,CAACE,WAAW,CAACC,IAAI,CAACZ,IAAI,CAAC;UACxC;QACF;MACA,KAAK,iBAAiB;QAAE;UACtB,MAAMa,cAAc,GAAG,SAAS;UAChCJ,cAAc,GAAG,CAACI,cAAc,CAACD,IAAI,CAACZ,IAAI,CAAC;UAC3C;QACF;MACA,KAAK,iBAAiB;QAAE;UACtBS,cAAc,GAAGT,IAAI,CAACc,MAAM,GAAG,CAAC;UAChC;QACF;MACA,KAAK,UAAU;QAAE;UACf,MAAMC,iBAAiB,GAAG,QAAQ;UAClCN,cAAc,GAAG,CAACM,iBAAiB,CAACH,IAAI,CAACZ,IAAI,CAAC;UAC9C;QACF;MACA,KAAK,yBAAyB;QAAE;UAC9BS,cAAc,GAAI,GAAEP,IAAK,EAAC,KAAM,GAAEE,YAAa,EAAC;UAChD;QACF;MACA;QACE;IAAM;IAEV,IAAIK,cAAc,EAAE,OAAOR,MAAM,CAACe,OAAO;EAC3C;EACA,KAAK,MAAMC,SAAS,IAAIjB,IAAI,EAAE;IAC5B,KAAK,MAAMQ,cAAc,IAAIP,MAAM,CAACgB,SAAS,CAAC,EAAE;MAC9C,MAAMC,KAAK,GAAGX,QAAQ,CACpBC,cAAc,EACdR,IAAI,CAACiB,SAAS,CAAC,EACfhB,MAAM,CAACgB,SAAS,CAAC,CAACT,cAAc,CAAC,CAClC;MACD,IAAIU,KAAK,IAAI,CAACZ,MAAM,CAACW,SAAS,CAAC,EAAE;QAC/BX,MAAM,CAACW,SAAS,CAAC,GAAGC,KAAK;MAC3B;IACF;EACF;EACA,OAAOZ,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}