{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport httpService from \"../services/http.service\";\nimport { getAccesToken } from \"../services/localStorage.service\";\nimport { toast } from \"react-toastify\";\nimport orderService from \"../services/orders.service\";\nconst changeProductSlice = createSlice({\n  name: \"changeProduct\",\n  initialState: {\n    entities: null,\n    isLoading: true,\n    error: null\n  },\n  reducers: {\n    changeProductRequested: state => {\n      state.isLoading = true;\n    },\n    changeProductReceved: (state, action) => {\n      state.entities = action.payload;\n      state.isLoading = false;\n    },\n    changeProductRequestFailed: (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    }\n  }\n});\nconst {\n  reducer: changeProductReducer,\n  actions\n} = changeProductSlice;\nconst {\n  changeProductRequested,\n  changeProductReceved,\n  changeProductRequestFailed\n} = actions;\nexport const loadChangeProductList = () => async dispatch => {\n  dispatch(changeProductRequested());\n  try {\n    const {\n      data\n    } = await httpService.get(\"product\" + `.json?auth=${getAccesToken()}`);\n    const arrInitValues = [];\n    Object.keys(data).forEach(item => arrInitValues.push(data[item]));\n    const allSizes = arrInitValues.map(item => item = item.quantity);\n    const remakeSizes = allSizes.map(obj => {\n      const remakeValues = obj.map(item => {\n        return item = {\n          size: item.size,\n          value: 0\n        };\n      });\n      return obj = remakeValues;\n    });\n    const pushNullSizesToArr = arrInitValues.map((item, i) => {\n      return item = {\n        ...item,\n        quantity: remakeSizes[i]\n      };\n    });\n    dispatch(changeProductReceved(pushNullSizesToArr));\n  } catch (error) {\n    dispatch(changeProductRequestFailed(error.message));\n  }\n};\nexport const changeProductQuantity = (changeProduct, selectedProduct, selectedSize) => async dispatch => {\n  const filtradeSingleData = changeProduct.filter(item => item._id === selectedProduct[0]._id);\n\n  ///obj data\n  const objData = filtradeSingleData[0];\n  ///filterInitialQuantity\n  const initialyQuantityFromObj = selectedProduct[0].quantity.filter(item => `${item.size}` === `${selectedSize}`);\n  ///filterQuantityFromZeroValues\n  const secondQuantityFromObj = objData.quantity.filter(item => `${item.size}` === `${selectedSize}`);\n  if (secondQuantityFromObj[0].value < initialyQuantityFromObj[0].value) {\n    const updatedQuantity = objData.quantity.map(item => {\n      if (`${item.size}` === `${selectedSize}`) {\n        return {\n          ...item,\n          value: item.value + 1\n        };\n      }\n      return item;\n    });\n    const updatedObjData = {\n      ...objData,\n      quantity: updatedQuantity\n    };\n    toast.success(\"Товар добавлен в корзину\");\n    const newData = changeProduct.map(item => {\n      if (item._id === updatedObjData._id) {\n        return updatedObjData;\n      }\n      return item;\n    });\n    dispatch(changeProductReceved(newData));\n    await orderService.createBascetPurchases(updatedObjData);\n  } else if (secondQuantityFromObj[0].value === initialyQuantityFromObj[0].value) {\n    toast.error(\"В наличии нет размера данного товара\");\n  }\n};\nexport const getProductNullVal = () => state => state.changeProduct.entities;\nexport default changeProductReducer;","map":{"version":3,"names":["createSlice","httpService","getAccesToken","toast","orderService","changeProductSlice","name","initialState","entities","isLoading","error","reducers","changeProductRequested","state","changeProductReceved","action","payload","changeProductRequestFailed","reducer","changeProductReducer","actions","loadChangeProductList","dispatch","data","get","arrInitValues","Object","keys","forEach","item","push","allSizes","map","quantity","remakeSizes","obj","remakeValues","size","value","pushNullSizesToArr","i","message","changeProductQuantity","changeProduct","selectedProduct","selectedSize","filtradeSingleData","filter","_id","objData","initialyQuantityFromObj","secondQuantityFromObj","updatedQuantity","updatedObjData","success","newData","createBascetPurchases","getProductNullVal"],"sources":["C:/Users/Slim Shady/Desktop/project-x/client/src/store/changeProduct.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport httpService from \"../services/http.service\";\r\nimport { getAccesToken } from \"../services/localStorage.service\";\r\nimport { toast } from \"react-toastify\";\r\nimport orderService from \"../services/orders.service\";\r\n\r\nconst changeProductSlice = createSlice({\r\n  name: \"changeProduct\",\r\n  initialState: {\r\n    entities: null,\r\n    isLoading: true,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    changeProductRequested: (state) => {\r\n      state.isLoading = true;\r\n    },\r\n    changeProductReceved: (state, action) => {\r\n      state.entities = action.payload;\r\n      state.isLoading = false;\r\n    },\r\n    changeProductRequestFailed: (state, action) => {\r\n      state.error = action.payload;\r\n      state.isLoading = false;\r\n    },\r\n  },\r\n});\r\n\r\nconst { reducer: changeProductReducer, actions } = changeProductSlice;\r\nconst {\r\n  changeProductRequested,\r\n  changeProductReceved,\r\n  changeProductRequestFailed,\r\n} = actions;\r\nexport const loadChangeProductList = () => async (dispatch) => {\r\n  dispatch(changeProductRequested());\r\n  try {\r\n    const { data } = await httpService.get(\r\n      \"product\" + `.json?auth=${getAccesToken()}`\r\n    );\r\n    const arrInitValues = [];\r\n    Object.keys(data).forEach((item) => arrInitValues.push(data[item]));\r\n    const allSizes = arrInitValues.map((item) => (item = item.quantity));\r\n    const remakeSizes = allSizes.map((obj) => {\r\n      const remakeValues = obj.map((item) => {\r\n        return (item = { size: item.size, value: 0 });\r\n      });\r\n      return (obj = remakeValues);\r\n    });\r\n    const pushNullSizesToArr = arrInitValues.map((item, i) => {\r\n      return (item = { ...item, quantity: remakeSizes[i] });\r\n    });\r\n    dispatch(changeProductReceved(pushNullSizesToArr));\r\n  } catch (error) {\r\n    dispatch(changeProductRequestFailed(error.message));\r\n  }\r\n};\r\n\r\nexport const changeProductQuantity =\r\n  (changeProduct, selectedProduct, selectedSize) => async (dispatch) => {\r\n    const filtradeSingleData = changeProduct.filter(\r\n      (item) => item._id === selectedProduct[0]._id\r\n    );\r\n\r\n    ///obj data\r\n    const objData = filtradeSingleData[0];\r\n    ///filterInitialQuantity\r\n    const initialyQuantityFromObj = selectedProduct[0].quantity.filter(\r\n      (item) => `${item.size}` === `${selectedSize}`\r\n    );\r\n    ///filterQuantityFromZeroValues\r\n    const secondQuantityFromObj = objData.quantity.filter(\r\n      (item) => `${item.size}` === `${selectedSize}`\r\n    );\r\n\r\n    if (secondQuantityFromObj[0].value < initialyQuantityFromObj[0].value) {\r\n      const updatedQuantity = objData.quantity.map((item) => {\r\n        if (`${item.size}` === `${selectedSize}`) {\r\n          return { ...item, value: item.value + 1 };\r\n        }\r\n        return item;\r\n      });\r\n      const updatedObjData = { ...objData, quantity: updatedQuantity };\r\n      toast.success(\"Товар добавлен в корзину\");\r\n      const newData = changeProduct.map((item) => {\r\n        if (item._id === updatedObjData._id) {\r\n          return updatedObjData;\r\n        }\r\n        return item;\r\n      });\r\n      dispatch(changeProductReceved(newData));\r\n      await orderService.createBascetPurchases(updatedObjData);\r\n    } else if (\r\n      secondQuantityFromObj[0].value === initialyQuantityFromObj[0].value\r\n    ) {\r\n      toast.error(\"В наличии нет размера данного товара\");\r\n    }\r\n  };\r\n\r\nexport const getProductNullVal = () => (state) => state.changeProduct.entities;\r\nexport default changeProductReducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}